/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SignupImport } from './routes/signup'
import { Route as LogoutImport } from './routes/logout'
import { Route as LoginImport } from './routes/login'
import { Route as AuthedImport } from './routes/_authed'
import { Route as IndexImport } from './routes/index'
import { Route as AuthedPostsRouteImport } from './routes/_authed/posts.route'
import { Route as AuthedPostsIndexImport } from './routes/_authed/posts.index'
import { Route as AuthedArticlesIndexImport } from './routes/_authed/articles.index'
import { Route as AuthedPostsPostIdImport } from './routes/_authed/posts.$postId'
import { Route as AuthedArticlesNewImport } from './routes/_authed/articles.new'
import { Route as AuthedArticlesArticleIdImport } from './routes/_authed/articles.$articleId'

// Create/Update Routes

const SignupRoute = SignupImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => rootRoute,
} as any)

const LogoutRoute = LogoutImport.update({
  id: '/logout',
  path: '/logout',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const AuthedRoute = AuthedImport.update({
  id: '/_authed',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AuthedPostsRouteRoute = AuthedPostsRouteImport.update({
  id: '/posts',
  path: '/posts',
  getParentRoute: () => AuthedRoute,
} as any)

const AuthedPostsIndexRoute = AuthedPostsIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthedPostsRouteRoute,
} as any)

const AuthedArticlesIndexRoute = AuthedArticlesIndexImport.update({
  id: '/articles/',
  path: '/articles/',
  getParentRoute: () => AuthedRoute,
} as any)

const AuthedPostsPostIdRoute = AuthedPostsPostIdImport.update({
  id: '/$postId',
  path: '/$postId',
  getParentRoute: () => AuthedPostsRouteRoute,
} as any)

const AuthedArticlesNewRoute = AuthedArticlesNewImport.update({
  id: '/articles/new',
  path: '/articles/new',
  getParentRoute: () => AuthedRoute,
} as any)

const AuthedArticlesArticleIdRoute = AuthedArticlesArticleIdImport.update({
  id: '/articles/$articleId',
  path: '/articles/$articleId',
  getParentRoute: () => AuthedRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_authed': {
      id: '/_authed'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthedImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/logout': {
      id: '/logout'
      path: '/logout'
      fullPath: '/logout'
      preLoaderRoute: typeof LogoutImport
      parentRoute: typeof rootRoute
    }
    '/signup': {
      id: '/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof SignupImport
      parentRoute: typeof rootRoute
    }
    '/_authed/posts': {
      id: '/_authed/posts'
      path: '/posts'
      fullPath: '/posts'
      preLoaderRoute: typeof AuthedPostsRouteImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/articles/$articleId': {
      id: '/_authed/articles/$articleId'
      path: '/articles/$articleId'
      fullPath: '/articles/$articleId'
      preLoaderRoute: typeof AuthedArticlesArticleIdImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/articles/new': {
      id: '/_authed/articles/new'
      path: '/articles/new'
      fullPath: '/articles/new'
      preLoaderRoute: typeof AuthedArticlesNewImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/posts/$postId': {
      id: '/_authed/posts/$postId'
      path: '/$postId'
      fullPath: '/posts/$postId'
      preLoaderRoute: typeof AuthedPostsPostIdImport
      parentRoute: typeof AuthedPostsRouteImport
    }
    '/_authed/articles/': {
      id: '/_authed/articles/'
      path: '/articles'
      fullPath: '/articles'
      preLoaderRoute: typeof AuthedArticlesIndexImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/posts/': {
      id: '/_authed/posts/'
      path: '/'
      fullPath: '/posts/'
      preLoaderRoute: typeof AuthedPostsIndexImport
      parentRoute: typeof AuthedPostsRouteImport
    }
  }
}

// Create and export the route tree

interface AuthedPostsRouteRouteChildren {
  AuthedPostsPostIdRoute: typeof AuthedPostsPostIdRoute
  AuthedPostsIndexRoute: typeof AuthedPostsIndexRoute
}

const AuthedPostsRouteRouteChildren: AuthedPostsRouteRouteChildren = {
  AuthedPostsPostIdRoute: AuthedPostsPostIdRoute,
  AuthedPostsIndexRoute: AuthedPostsIndexRoute,
}

const AuthedPostsRouteRouteWithChildren =
  AuthedPostsRouteRoute._addFileChildren(AuthedPostsRouteRouteChildren)

interface AuthedRouteChildren {
  AuthedPostsRouteRoute: typeof AuthedPostsRouteRouteWithChildren
  AuthedArticlesArticleIdRoute: typeof AuthedArticlesArticleIdRoute
  AuthedArticlesNewRoute: typeof AuthedArticlesNewRoute
  AuthedArticlesIndexRoute: typeof AuthedArticlesIndexRoute
}

const AuthedRouteChildren: AuthedRouteChildren = {
  AuthedPostsRouteRoute: AuthedPostsRouteRouteWithChildren,
  AuthedArticlesArticleIdRoute: AuthedArticlesArticleIdRoute,
  AuthedArticlesNewRoute: AuthedArticlesNewRoute,
  AuthedArticlesIndexRoute: AuthedArticlesIndexRoute,
}

const AuthedRouteWithChildren =
  AuthedRoute._addFileChildren(AuthedRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof AuthedRouteWithChildren
  '/login': typeof LoginRoute
  '/logout': typeof LogoutRoute
  '/signup': typeof SignupRoute
  '/posts': typeof AuthedPostsRouteRouteWithChildren
  '/articles/$articleId': typeof AuthedArticlesArticleIdRoute
  '/articles/new': typeof AuthedArticlesNewRoute
  '/posts/$postId': typeof AuthedPostsPostIdRoute
  '/articles': typeof AuthedArticlesIndexRoute
  '/posts/': typeof AuthedPostsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof AuthedRouteWithChildren
  '/login': typeof LoginRoute
  '/logout': typeof LogoutRoute
  '/signup': typeof SignupRoute
  '/articles/$articleId': typeof AuthedArticlesArticleIdRoute
  '/articles/new': typeof AuthedArticlesNewRoute
  '/posts/$postId': typeof AuthedPostsPostIdRoute
  '/articles': typeof AuthedArticlesIndexRoute
  '/posts': typeof AuthedPostsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_authed': typeof AuthedRouteWithChildren
  '/login': typeof LoginRoute
  '/logout': typeof LogoutRoute
  '/signup': typeof SignupRoute
  '/_authed/posts': typeof AuthedPostsRouteRouteWithChildren
  '/_authed/articles/$articleId': typeof AuthedArticlesArticleIdRoute
  '/_authed/articles/new': typeof AuthedArticlesNewRoute
  '/_authed/posts/$postId': typeof AuthedPostsPostIdRoute
  '/_authed/articles/': typeof AuthedArticlesIndexRoute
  '/_authed/posts/': typeof AuthedPostsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/login'
    | '/logout'
    | '/signup'
    | '/posts'
    | '/articles/$articleId'
    | '/articles/new'
    | '/posts/$postId'
    | '/articles'
    | '/posts/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/login'
    | '/logout'
    | '/signup'
    | '/articles/$articleId'
    | '/articles/new'
    | '/posts/$postId'
    | '/articles'
    | '/posts'
  id:
    | '__root__'
    | '/'
    | '/_authed'
    | '/login'
    | '/logout'
    | '/signup'
    | '/_authed/posts'
    | '/_authed/articles/$articleId'
    | '/_authed/articles/new'
    | '/_authed/posts/$postId'
    | '/_authed/articles/'
    | '/_authed/posts/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthedRoute: typeof AuthedRouteWithChildren
  LoginRoute: typeof LoginRoute
  LogoutRoute: typeof LogoutRoute
  SignupRoute: typeof SignupRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthedRoute: AuthedRouteWithChildren,
  LoginRoute: LoginRoute,
  LogoutRoute: LogoutRoute,
  SignupRoute: SignupRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_authed",
        "/login",
        "/logout",
        "/signup"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_authed": {
      "filePath": "_authed.tsx",
      "children": [
        "/_authed/posts",
        "/_authed/articles/$articleId",
        "/_authed/articles/new",
        "/_authed/articles/"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/logout": {
      "filePath": "logout.tsx"
    },
    "/signup": {
      "filePath": "signup.tsx"
    },
    "/_authed/posts": {
      "filePath": "_authed/posts.route.tsx",
      "parent": "/_authed",
      "children": [
        "/_authed/posts/$postId",
        "/_authed/posts/"
      ]
    },
    "/_authed/articles/$articleId": {
      "filePath": "_authed/articles.$articleId.tsx",
      "parent": "/_authed"
    },
    "/_authed/articles/new": {
      "filePath": "_authed/articles.new.tsx",
      "parent": "/_authed"
    },
    "/_authed/posts/$postId": {
      "filePath": "_authed/posts.$postId.tsx",
      "parent": "/_authed/posts"
    },
    "/_authed/articles/": {
      "filePath": "_authed/articles.index.tsx",
      "parent": "/_authed"
    },
    "/_authed/posts/": {
      "filePath": "_authed/posts.index.tsx",
      "parent": "/_authed/posts"
    }
  }
}
ROUTE_MANIFEST_END */
